name: Auto Review

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install
        run: npm ci

      - name: Typecheck
        run: npm run check

      - name: Build
        run: npm run build

      - name: Summarize changes
        id: changes
        run: |
          echo "FILES<<EOF" >> $GITHUB_OUTPUT
          git diff --name-status ${{ github.event.before || 'HEAD~1' }} ${{ github.sha }} || true >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post comment (PRs)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const files = `\n\`\`\`\n${{ steps.changes.outputs.FILES || 'n/a' }}\n\`\`\`\n`;
            const body = [
              "### ðŸ¤– Auto Review",
              "- Typecheck: âœ… ran `npm run check`",
              "- Build: âœ… ran `npm run build`",
              "#### Changed files:",
              files
            ].join("\n");
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

      - name: Create/Update issue (push to main)
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        uses: actions/github-script@v7
        with:
          script: |
            const files = `\n\`\`\`\n${{ steps.changes.outputs.FILES || 'n/a' }}\n\`\`\`\n`;
            const title = "ðŸ¤– Auto Review report";
            const body = [
              "### ðŸ¤– Auto Review (main)",
              "- Typecheck: âœ… ran `npm run check`",
              "- Build: âœ… ran `npm run build`",
              "#### Changed files:",
              files
            ].join("\n");

            // find existing open issue with same title
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner, repo: context.repo.repo, state: "open"
            });
            const existing = issues.find(i => i.title === title);
            if (existing) {
              await github.rest.issues.createComment({
                issue_number: existing.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title,
                body
              });
            }